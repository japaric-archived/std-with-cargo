diff --git a/src/liballoc/Cargo.toml b/src/liballoc/Cargo.toml
new file mode 100644
index 0000000..e161e91
--- /dev/null
+++ b/src/liballoc/Cargo.toml
@@ -0,0 +1,19 @@
+[package]
+authors = ["The Rust Project Developers"]
+build = "build.rs"
+name = "alloc"
+version = "0.0.0"
+
+[lib]
+name = "alloc"
+path = "lib.rs"
+
+[features]
+jemalloc = []
+jemalloc_dynamic = []
+
+[dependencies.core]
+path = "../libcore"
+
+[dependencies.libc]
+path = "../liblibc"
diff --git a/src/liballoc/build.rs b/src/liballoc/build.rs
new file mode 100644
index 0000000..ff8a9bd
--- /dev/null
+++ b/src/liballoc/build.rs
@@ -0,0 +1,208 @@
+#![allow(dead_code)]
+
+use std::fs::File;
+use std::io::Read;
+use std::ops::Range;
+use std::path::{Path, PathBuf};
+use std::process::{Command, ExitStatus};
+use std::{env, fs, iter};
+
+trait StatusOrPanic {
+    fn status_or_panic(&mut self) -> ExitStatus;
+}
+
+impl StatusOrPanic for Command {
+    fn status_or_panic(&mut self) -> ExitStatus {
+        self.status().unwrap_or_else(|_| {
+            panic!("error: failed to execute {:?}", self)
+        })
+    }
+}
+
+fn main() {
+    let ref ctxt = Ctxt::new().unwrap();
+
+    println!("cargo:rustc-link-search=native={}", ctxt.dst().display());
+
+    match () {
+        #[cfg(feature = "jemalloc_dynamic")]
+        () => jemalloc(ctxt, true),
+        #[cfg(feature = "jemalloc")]
+        () => jemalloc(ctxt, false),
+        #[cfg(all(not(feature = "jemalloc"), not(feature = "jemalloc_dynamic")))]
+        () => {},
+    }
+}
+
+struct Cflags<'a> {
+    host: Option<std::str::Split<'a, char>>,
+    target: iter::Peekable<std::str::Split<'a, char>>,
+}
+
+impl<'a> Iterator for Cflags<'a> {
+    type Item = &'a str;
+
+    // Host flags may look like: "-O2 -pipe", target flags may look like "-Wall -fPIC $(CFLAGS)"
+    // Collecting this iterator should give you: ["-Wall", "-fPIC", "-O2", "-pipe"]
+    fn next(&mut self) -> Option<&'a str> {
+        if self.target.peek() == Some(&"$(CFLAGS)") {
+            self.host.as_mut().and_then(|it| it.next()).or_else(|| {
+                self.target.next();  // drop $(CFLAGS)
+                self.target.next()
+            })
+        } else {
+            self.target.next()
+        }
+    }
+}
+
+struct Ctxt {
+    ar: String,
+    cc: String,
+    cfg: String,
+    cfg_cflags: Range<usize>,
+    cflags: Option<String>,
+    dst: PathBuf,
+    host: String,
+    src: PathBuf,
+    target: String,
+}
+
+impl Ctxt {
+    fn new() -> Result<Ctxt, String> {
+        // mips-unknown-linux-gnu
+        let target = try!(env::var("TARGET").map_err(|_| "cargo bug: $TARGET not set"));
+
+        // mips_unknown_linux_gnu
+        let target_ = target.replace("-", "_");
+
+        // x86_64-unknown-linux-gnu
+        let host = try!(env::var("HOST").map_err(|_| "cargo bug: $HOST not set"));
+
+        // mips-openwrt-linux-ar
+        let ar = {
+            let ref var = format!("AR_{}", target_);
+            try!(env::var(var).map_err(|_| format!("error: {} not set", var)))
+        };
+
+        // mips-openwrt-linux-gcc
+        let cc = {
+            let ref var = format!("CC_{}", target_);
+            try!(env::var(var).map_err(|_| format!("error: {} not set", var)))
+        };
+
+        let src = PathBuf::from(try!(env::var("CARGO_MANIFEST_DIR").map_err(|_| {
+            "cargo bug: $CARGO_MANIFEST_DIR not set"
+        })));
+
+        let dst = PathBuf::from(try!(env::var("OUT_DIR").map_err(|_| {
+            "cargo bug: $OUT_DIR not set"
+        })));
+
+        let cflags = env::var("CFLAGS").ok();
+
+        let mut cfg = String::new();
+        try! {
+            File::open(format!("../../mk/cfg/{}.mk", target))
+                .and_then(|mut f| {
+                    f.read_to_string(&mut cfg).map(|_| {})
+                })
+                .map_err(|_| format!("error: couldn't read {}.mk", target))
+        }
+
+        // CFG_JEMALLOC_CFLAGS_$(TARGET_) := $(CFLAGS)
+        let cfg_cflags = try!(cfg.find("CFG_JEMALLOC_CFLAGS_").and_then(|sol| {
+            cfg[sol..].find(":= ").and_then(|start| {
+                cfg[sol+start..].find("\n").and_then(|end| {
+                    Some(sol+start+":= ".len()..sol+start+end)
+                })
+            })
+        }).ok_or(format!("couldn't find CFLAGS in {}.mk", target)));
+
+        Ok(Ctxt {
+            ar: ar,
+            cc: cc,
+            cfg: cfg,
+            cfg_cflags: cfg_cflags,
+            cflags: cflags,
+            dst: dst,
+            host: host,
+            src: src,
+            target: target,
+        })
+    }
+
+    fn ar(&self) -> &str {
+        &self.ar
+    }
+
+    fn cc(&self) -> &str {
+        &self.cc
+    }
+
+    fn cflags(&self) -> Cflags {
+        Cflags {
+            host: self.cflags.as_ref().map(|s| s.split(' ')),
+            target: self.cfg[self.cfg_cflags.clone()].trim().split(' ').peekable()
+        }
+    }
+
+    fn dst(&self) -> &Path {
+        &self.dst
+    }
+
+    fn host(&self) -> &str {
+        &self.host
+    }
+
+    fn src(&self) -> &Path {
+        &self.src
+    }
+
+    fn target(&self) -> &str {
+        &self.target
+    }
+}
+
+/// Build `libjemalloc`
+// see mk/rt.mk
+fn jemalloc(ctxt: &Ctxt, dynamic: bool) {
+    let ar = ctxt.ar();
+    let ref dst = ctxt.dst().join("jemalloc");
+    let ref src = ctxt.src().join("../jemalloc");
+
+    fs::create_dir_all(dst).ok();
+
+    assert! {
+        Command::new(src.join("configure"))
+            .current_dir(dst)
+            .arg("--with-jemalloc-prefix=je_")
+            .arg("--disable-fill")  // see CFG_JEMALLOC_FLAGS at mk/main.mk
+            .arg(format!("--build={}", ctxt.host()))
+            .arg(format!("--host={}", ctxt.target()))
+            .arg(format!("CC={} {}", ctxt.cc(), ctxt.cflags().collect::<Vec<_>>().join(" ")))
+            .arg(format!("AR={}", ar))
+            .arg(format!("RANLIB={} s", ar))
+            .arg(format!("CPPFLAGS=-I {}", ctxt.src().join("../rt/").display()))
+            .arg("EXTRA_CFLAGS=-g1 -ffunction-sections -fdata-sections")
+            .status_or_panic().success()
+    }
+
+    assert! {
+        Command::new("make")
+            .arg("-C").arg(dst)
+            .arg(if dynamic { "build_lib_shared" } else { "build_lib_static" })
+            .status_or_panic().success()
+    }
+
+    if dynamic {
+        fs::copy(dst.join("lib/libjemalloc.so.2"), ctxt.dst().join("libjemalloc.so.2")).unwrap();
+        fs::copy(dst.join("lib/libjemalloc.so"), ctxt.dst().join("libjemalloc.so")).unwrap();
+
+        println!("cargo:rustc-link-lib=jemalloc");
+    } else {
+        fs::copy(dst.join("lib/libjemalloc_pic.a"), ctxt.dst().join("libjemalloc.a")).unwrap();
+
+        println!("cargo:rustc-link-lib=static=jemalloc");
+    }
+}
diff --git a/src/libcollections/Cargo.toml b/src/libcollections/Cargo.toml
new file mode 100644
index 0000000..00964b0
--- /dev/null
+++ b/src/libcollections/Cargo.toml
@@ -0,0 +1,21 @@
+[package]
+authors = ["The Rust Project Developers"]
+name = "collections"
+version = "0.0.0"
+
+[lib]
+name = "collections"
+path = "lib.rs"
+
+[features]
+jemalloc = ["alloc/jemalloc"]
+jemalloc_dynamic = ["alloc/jemalloc_dynamic"]
+
+[dependencies.alloc]
+path = "../liballoc"
+
+[dependencies.core]
+path = "../libcore"
+
+[dependencies.rustc_unicode]
+path = "../librustc_unicode"
diff --git a/src/libcore/Cargo.toml b/src/libcore/Cargo.toml
new file mode 100644
index 0000000..3aa8281
--- /dev/null
+++ b/src/libcore/Cargo.toml
@@ -0,0 +1,8 @@
+[package]
+authors = ["The Rust Project Developers"]
+name = "core"
+version = "0.0.0"
+
+[lib]
+name = "core"
+path = "lib.rs"
diff --git a/src/liblibc/Cargo.toml b/src/liblibc/Cargo.toml
new file mode 100644
index 0000000..dde5e48
--- /dev/null
+++ b/src/liblibc/Cargo.toml
@@ -0,0 +1,11 @@
+[package]
+authors = ["The Rust Project Developers"]
+name = "libc"
+version = "0.0.0"
+
+[lib]
+name = "libc"
+path = "lib.rs"
+
+[dependencies.core]
+path = "../libcore"
diff --git a/src/librand/Cargo.toml b/src/librand/Cargo.toml
new file mode 100644
index 0000000..35b3c8a
--- /dev/null
+++ b/src/librand/Cargo.toml
@@ -0,0 +1,11 @@
+[package]
+authors = ["The Rust Project Developers"]
+name = "rand"
+version = "0.0.0"
+
+[lib]
+name = "rand"
+path = "lib.rs"
+
+[dependencies.core]
+path = "../libcore"
diff --git a/src/librustc_bitflags/Cargo.toml b/src/librustc_bitflags/Cargo.toml
new file mode 100644
index 0000000..53c11de
--- /dev/null
+++ b/src/librustc_bitflags/Cargo.toml
@@ -0,0 +1,8 @@
+[package]
+authors = ["The Rust Project Developers"]
+name = "rustc_bitflags"
+version = "0.0.0"
+
+[lib]
+name = "rustc_bitflags"
+path = "lib.rs"
diff --git a/src/librustc_unicode/Cargo.toml b/src/librustc_unicode/Cargo.toml
new file mode 100644
index 0000000..52dfb2e
--- /dev/null
+++ b/src/librustc_unicode/Cargo.toml
@@ -0,0 +1,11 @@
+[package]
+authors = ["The Rust Project Developers"]
+name = "rustc_unicode"
+version = "0.0.0"
+
+[lib]
+name = "rustc_unicode"
+path = "lib.rs"
+
+[dependencies.core]
+path = "../libcore"
diff --git a/src/libstd/Cargo.toml b/src/libstd/Cargo.toml
new file mode 100644
index 0000000..cb7a399
--- /dev/null
+++ b/src/libstd/Cargo.toml
@@ -0,0 +1,39 @@
+[package]
+authors = ["The Rust Project Developers"]
+build = "build.rs"
+name = "std"
+version = "0.0.0"
+
+[lib]
+name = "std"
+path = "lib.rs"
+
+[features]
+backtrace = []
+jemalloc = ["alloc/jemalloc", "collections/jemalloc"]
+jemalloc_dynamic = ["alloc/jemalloc_dynamic", "collections/jemalloc_dynamic"]
+#default = ["backtrace", "jemalloc"]
+
+[build_dependencies]
+gcc = "*"
+
+[dependencies.alloc]
+path = "../liballoc"
+
+[dependencies.collections]
+path = "../libcollections"
+
+[dependencies.core]
+path = "../libcore"
+
+[dependencies.libc]
+path = "../liblibc"
+
+[dependencies.rand]
+path = "../librand"
+
+[dependencies.rustc_bitflags]
+path = "../librustc_bitflags"
+
+[dependencies.rustc_unicode]
+path = "../librustc_unicode"
diff --git a/src/libstd/build.rs b/src/libstd/build.rs
new file mode 100644
index 0000000..f80df12
--- /dev/null
+++ b/src/libstd/build.rs
@@ -0,0 +1,253 @@
+#![allow(dead_code)]
+
+extern crate gcc;
+
+use std::borrow::Cow;
+use std::fs::{File, OpenOptions, self};
+use std::io::{Read, Write};
+use std::ops::{Range, RangeTo};
+use std::path::{Path, PathBuf};
+use std::process::{Command, ExitStatus};
+use std::{env, iter};
+
+trait StatusOrPanic {
+    fn status_or_panic(&mut self) -> ExitStatus;
+}
+
+impl StatusOrPanic for Command {
+    fn status_or_panic(&mut self) -> ExitStatus {
+        self.status().unwrap_or_else(|_| {
+            panic!("error: failed to execute {:?}", self)
+        })
+    }
+}
+
+fn main() {
+    let ref ctxt = Ctxt::new().unwrap();
+
+    rust_builtin();
+    match () {
+        #[cfg(feature = "backtrace")]
+        () => backtrace(ctxt),
+        #[cfg(not(feature = "backtrace"))]
+        () => {},
+    }
+    compiler_rt(ctxt);
+}
+
+struct Cflags<'a> {
+    host: Option<std::str::Split<'a, char>>,
+    target: iter::Peekable<std::str::Split<'a, char>>,
+}
+
+impl<'a> Iterator for Cflags<'a> {
+    type Item = &'a str;
+
+    // Host flags may look like: "-O2 -pipe", target flags may look like "-Wall -fPIC $(CFLAGS)"
+    // Collecting this iterator should give you: ["-Wall", "-fPIC", "-O2", "-pipe"]
+    fn next(&mut self) -> Option<&'a str> {
+        if self.target.peek() == Some(&"$(CFLAGS)") {
+            self.host.as_mut().and_then(|it| it.next()).or_else(|| {
+                self.target.next();  // drop $(CFLAGS)
+                self.target.next()
+            })
+        } else {
+            self.target.next()
+        }
+    }
+}
+
+struct Ctxt {
+    ar: String,
+    arch: RangeTo<usize>,
+    cc: String,
+    cfg: String,
+    cfg_cflags: Range<usize>,
+    cflags: Option<String>,
+    dst: PathBuf,
+    host: String,
+    src: PathBuf,
+    target: String,
+}
+
+impl Ctxt {
+    fn new() -> Result<Ctxt, Cow<'static, str>> {
+        // mips-unknown-linux-gnu
+        let target = try!(env::var("TARGET").map_err(|_| "cargo bug: $TARGET not set"));
+
+        let arch = try!(target.find("-").ok_or("cargo bug: malformed $TARGET variable"));
+
+        // mips_unknown_linux_gnu
+        let target_ = target.replace("-", "_");
+
+        // x86_64-unknown-linux-gnu
+        let host = try!(env::var("HOST").map_err(|_| "cargo bug: $HOST not set"));
+
+        // mips-openwrt-linux-ar
+        let ar = {
+            let ref var = format!("AR_{}", target_);
+            try!(env::var(var).map_err(|_| format!("error: {} not set", var)))
+        };
+
+        // mips-openwrt-linux-gcc
+        let cc = {
+            let ref var = format!("CC_{}", target_);
+            try!(env::var(var).map_err(|_| format!("error: {} not set", var)))
+        };
+
+        let src = PathBuf::from(try!(env::var("CARGO_MANIFEST_DIR").map_err(|_| {
+            "cargo bug: $CARGO_MANIFEST_DIR not set"
+        })));
+
+        let dst = PathBuf::from(try!(env::var("OUT_DIR").map_err(|_| {
+            "cargo bug: $OUT_DIR not set"
+        })));
+
+        let cflags = env::var("CFLAGS").ok();
+
+        let mut cfg = String::new();
+        try! {
+            File::open(format!("../../mk/cfg/{}.mk", target))
+                .and_then(|mut f| {
+                    f.read_to_string(&mut cfg).map(|_| {})
+                })
+                .map_err(|_| format!("error: couldn't read {}.mk", target))
+        }
+
+        // CFG_GCCISH_CFLAGS_$(TARGET_) := $(CFLAGS)
+        let cfg_cflags = try!(cfg.find("CFG_GCCISH_CFLAGS_").and_then(|sol| {
+            cfg[sol..].find(":= ").and_then(|start| {
+                cfg[sol+start..].find("\n").and_then(|end| {
+                    Some(sol+start+":= ".len()..sol+start+end)
+                })
+            })
+        }).ok_or(format!("couldn't find CFLAGS in {}.mk", target)));
+
+        Ok(Ctxt {
+            ar: ar,
+            arch: ..arch,
+            cc: cc,
+            cfg: cfg,
+            cfg_cflags: cfg_cflags,
+            cflags: cflags,
+            dst: dst,
+            host: host,
+            src: src,
+            target: target,
+        })
+    }
+
+    fn ar(&self) -> &str {
+        &self.ar
+    }
+
+    fn arch(&self) -> &str {
+        &self.target[self.arch.clone()]
+    }
+
+    fn cc(&self) -> &str {
+        &self.cc
+    }
+
+    fn cflags(&self) -> Cflags {
+        Cflags {
+            host: self.cflags.as_ref().map(|s| s.split(' ')),
+            target: self.cfg[self.cfg_cflags.clone()].trim().split(' ').peekable()
+        }
+    }
+
+    fn dst(&self) -> &Path {
+        &self.dst
+    }
+
+    fn host(&self) -> &str {
+        &self.host
+    }
+
+    fn src(&self) -> &Path {
+        &self.src
+    }
+
+    fn target(&self) -> &str {
+        &self.target
+    }
+}
+
+/// Build `librust_builtin`
+fn rust_builtin() {
+    // implicit cargo:rustc-link-lib=static=rust_builtin
+    gcc::compile_library("librust_builtin.a", &["../rt/rust_builtin.c"]);
+}
+
+/// Build `libbacktrace`
+// See `mk/rt.mk`
+fn backtrace(ctxt: &Ctxt) {
+    let ar = ctxt.ar();
+    let dst = ctxt.dst();
+    let ref build_dir = dst.join("rt/libbacktrace");
+    let ref src = ctxt.src().join("../libbacktrace");
+
+    fs::create_dir_all(build_dir).ok();
+
+    let mut cflags: Vec<_> = ctxt.cflags().collect();
+    cflags.push("-fno-stack-protector");
+
+    assert! {
+        Command::new(src.join("configure"))
+            .current_dir(build_dir)
+            .env("AR", ar)
+            .env("CC", ctxt.cc())
+            .env("RANLIB", format!("{} s", ar))
+            .env("CFLAGS", cflags.join(" "))
+            .arg(format!("--target={}", ctxt.target()))
+            .arg(format!("--host={}", ctxt.host()))
+            .status_or_panic().success()
+    }
+
+    let mut options = OpenOptions::new();
+    options
+        .write(true)
+        .append(true);
+
+    options.open(build_dir.join("config.h"))
+        .unwrap()
+        .write_all("#undef HAVE_ATOMIC_FUNCTIONS\n#undef HAVE_SYNC_FUNCTIONS".as_bytes())
+        .unwrap();
+
+    assert! {
+        Command::new("make")
+            .arg(format!("INCDIR={}", src.display()))
+            .arg("-C").arg(build_dir)
+            .status_or_panic().success()
+    }
+
+    fs::copy(build_dir.join(".libs/libbacktrace.a"), dst.join("libbacktrace.a")).unwrap();
+
+    println!("cargo:rustc-link-lib=static=backtrace");
+}
+
+/// Build `libcompiler_rt.a`
+// We don't really need this to compile libstd, but most binaries that depend on libstd will try
+// to link to this library
+fn compiler_rt(ctxt: &Ctxt) {
+    let ar = ctxt.ar();
+    let dst = ctxt.dst();
+    let ref build_dir = dst.join("rt/compiler-rt");
+    let ref src = ctxt.src().join("../compiler-rt");
+
+    assert! {
+        Command::new("make")
+            .arg(format!("CC={}", ctxt.cc()))
+            .arg(format!("AR={}", ar))
+            .arg(format!("RANLIB={} s", ar))
+            .arg(format!("CFLAGS={}", ctxt.cflags().collect::<Vec<_>>().join(" ")))
+            .arg("-C").arg(src)
+            .arg(format!("ProjSrcRoot={}", src.display()))
+            .arg(format!("ProjObjRoot={}", build_dir.display()))
+            .arg(format!("TargetTriple={}", ctxt.target()))
+            .arg("triple-builtins")
+            .status_or_panic().success()
+    }
+
+    fs::copy(build_dir.join("triple/builtins/libcompiler_rt.a"), dst.join("libcompiler-rt.a")).unwrap();
+}
